{"componentChunkName":"component---src-templates-page-template-js","path":"/buildingAConfigDrivenUiInReactPart1","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"page":{"title":"Building a Config Driven UI in React - Part 1","publishedOn":"2019-11-12T12:39:18.088Z","author":"Arun Madhavan","tags":["reactjs","javascript","ui"],"description":"Part 1 of a 2 part blog, where I share my experiences with development of a configuration driven UI to build their executive dashboard","content":"This is the first part of the 2 part blog, where I share my experience in putting together a configuration driven user interface.\n\nThe solution consisted of the actual UI that is generated by configuration and admin app where a user can drag and drop to build the configuration.\nThis blog specifically talks about how we handled the UI based on a JSON configuration.\n\n## The Problem\n\nOur customer wanted to build an enterprise dashboard that would help them to see display different dimensions of data in different pages.\nEach page can follow a different layout consisting of Titles and it's corresponding Visualizations or summary.\n\nOne of their most important requirement was to have minimal or no dependency on developers for putting together these pages.\nThey had a few super users, who were good with writing queries and wanted to build a system that would help them to build a dashboard on their own.\n\n# 10,000ft Solution\n\nA part of our solution looked something like below.\n\n![Solution Blocks](./solution-blocks.png)\n\nThe DnD Config Generator provides the user a UI where they can assemble the UI components together.\nWith the generated JSON configuration, a service call is made, which persists the same into a database.\n\nWhen the executive dashboard needs to display the UI, it makes a restful call to the backend, which delivers the corresponding JSON from the database.\n\n## The Config Driven UI\n\nWe wanted to solve the configuration driven UI first, to understand what kind of configurations were required and take that as a cue while putting together the config generator.\nSo we started to break down our problem and came up with 2 major components.\n\n- Building the Layout\n- Filling the gaps in the layout with actual values such as titles, visualizations and summary. We call this as an **Element**.\n\n### Layout\n\nThe layout consisted of a bunch of elements that were stacked vertically, or horizontally.\nSo we needed to have containers that would let to stack the elements either vertically or horizontally.\nThere are also cases where we wanted to stack the Vertical / Horizontal containers inside each other or within themselves.\n\n![Layout example](./layout.png)\n\nIn the above example we have a vertical container that has elements E1 and E4 stacked vertically, along with a horizontal container H1.\nH1 in-turn stacks in the elements E2 and E3 horizontally.\n\nTo achieve this we needed a recursive JSON configuration.\n\n### Building the JSON configuration\n\nWe wanted to capture the following\n\n- A way to identify Horizontal/ Vertical / Element\n- Define widths of the Elements ( especially useful when horizontally stacked)\n- Identify the elements with an `id` so that it can be replaced with content ( more of this later in the blog )\n- Other configurations to appropriately paint the content inside an element.\n\nSo a sample JSON looked something like this.\n\n```json\n{\n  \"type\": \"Element\",\n  \"config\": {\n    \"id\": \"e1\",\n    \"height\": \"200px\",\n    \"color\": \"yellow\",\n    \"width\": \"12\"\n  },\n  \"children\": []\n}\n```\n\n| Property | Description                                                               |\n| -------- | ------------------------------------------------------------------------- |\n| type     | One of the values in Element, Vertical or Horizontal                      |\n| config   | Consists of a property `id` and other properties to help draw the element |\n| children | An array of child nodes, which follow the same format                     |\n\nTypically an `Element` will have an empty children and the others would have one or more items.\n\nYou can find a sample full blown JSON [here](./src/config/PageFormat.js)\n\n### Working with the JSON\n\nWe used Material-UI as part of the project, and leveraged it's Grid to help with drawing our layout.\n\nThe Material UI defines Grids using `<Grid \\>` tag. You can define a `<Grid container \\>` that would contain many `<Grid item \\>` which would have the content.\nThe `<Grid item \\>` can also take a parameter called `xs` which can be a number between 1- 12 as defined by it's 12 grid layout.\n\nTranslating this to our solution, we will\n\n- Have a Grid container for each of the `Vertical` items\n- No special handling for `Horizontal` and just let the children be created\n- `Elements` are rendered inside a Grid Item.\n\nIn the above case, both the `Elements` and `Vertical` are set with the width passed to it.\n\nSo we created a class called the [GridContainer](./src/components/GridContainer.js) that\ntakes an input config, which is nothing but a single element of the JSON, checks for it's type to be one in \"Vertical\", \"Horizontal\" or \"Element\" and\n\n- For Vertical\n  - It wraps inside a `<Grid item />`\n  - Iterates through all it's children and wraps them with a `<Grid container />` each\n  - Invokes the `GridContainer` again ( recursively ) with the child config value.\n- For Horizontal\n  - Iterates through the children and invokes the `GridContainer` for each of it's children.\n- For Elements\n  - Uses the config and draws the element.\n\nThe Key element of this class is how the config is used to build the layout in a recursive fashion.\n\n## Handling the Elements\n\nTo Be Continued ...\n","pagePath":"arunmadhavan-g/config-driven-ui"}}}}